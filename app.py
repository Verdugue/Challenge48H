"""
Application Streamlit pour la pr√©diction des prix de maisons.
Ce module impl√©mente une interface utilisateur interactive permettant d'explorer les donn√©es,
de cr√©er des features d√©riv√©es et de faire des pr√©dictions de prix de maisons.
"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score, KFold
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# Configuration de la page Streamlit
st.set_page_config(
    page_title="Pr√©diction des Prix de Maisons",
    page_icon="üè†",
    layout="wide"
)

# Titre et description de l'application
st.title("üè† Pr√©diction des Prix de Maisons")
st.markdown("""
Cette application permet de pr√©dire les prix des maisons en utilisant diff√©rentes caract√©ristiques.
Utilisez le menu de navigation √† gauche pour explorer les diff√©rentes sections.
""")

# Fonction de chargement des donn√©es avec mise en cache
@st.cache_data
def load_data():
    """
    Charge le dataset des maisons depuis le fichier CSV.
    Utilise le d√©corateur @st.cache_data pour mettre en cache les donn√©es.
    
    Returns:
        pd.DataFrame: Dataset des maisons
    """
    df = pd.read_csv('train.csv')
    return df

# Chargement des donn√©es
df = load_data()

# Barre lat√©rale pour la navigation
st.sidebar.title("Navigation")
page = st.sidebar.radio("Choisissez une section:", ["Exploration des Donn√©es", "Feature Engineering", "Pr√©diction"])

# Section Exploration des Donn√©es
if page == "Exploration des Donn√©es":
    st.header("Exploration des Donn√©es")
    
    # Affichage des donn√©es brutes
    st.subheader("Donn√©es Brutes")
    st.dataframe(df.head())
    
    # Statistiques descriptives
    st.subheader("Statistiques Descriptives")
    st.dataframe(df.describe())
    
    # Distribution des prix
    st.subheader("Distribution des Prix")
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.histplot(data=df, x='SalePrice', bins=50, ax=ax)
    plt.title('Distribution des Prix de Vente')
    st.pyplot(fig)
    
    # Matrice de corr√©lation
    st.subheader("Corr√©lations avec le Prix")
    
    # S√©lection des caract√©ristiques les plus importantes
    important_features = [
        'SalePrice', 'OverallQual', 'GrLivArea', 'GarageArea', 
        'TotalBsmtSF', 'YearBuilt', '1stFlrSF', 'FullBath',
        'TotRmsAbvGrd', 'GarageCars'
    ]
    
    # Dictionnaire de traduction
    feature_names_fr = {
        'SalePrice': 'Prix de Vente',
        'OverallQual': 'Qualit√© Globale',
        'GrLivArea': 'Surface Habitable',
        'GarageArea': 'Surface Garage',
        'TotalBsmtSF': 'Surface Sous-sol',
        'YearBuilt': 'Ann√©e Construction',
        '1stFlrSF': 'Surface RDC',
        'FullBath': 'Salles de Bain',
        'TotRmsAbvGrd': 'Nombre de Pi√®ces',
        'GarageCars': 'Places de Garage'
    }
    
    # Cr√©ation de la matrice de corr√©lation
    corr_matrix = df[important_features].corr()
    
    # Renommage des index et colonnes
    corr_matrix.index = [feature_names_fr[col] for col in corr_matrix.index]
    corr_matrix.columns = [feature_names_fr[col] for col in corr_matrix.columns]
    
    # Cr√©ation du graphique
    fig, ax = plt.subplots(figsize=(10, 8))
    sns.heatmap(corr_matrix, 
                annot=True,  # Afficher les valeurs
                cmap='coolwarm',  # Palette de couleurs
                center=0,  # Centre de la palette
                fmt='.2f',  # Format des nombres
                square=True,  # Cellules carr√©es
                ax=ax)
    plt.title('Matrice de Corr√©lation des Caract√©ristiques Principales')
    plt.xticks(rotation=45, ha='right')
    plt.yticks(rotation=0)
    st.pyplot(fig)
    
    # Explication des corr√©lations
    st.write("""
    **Interpr√©tation des corr√©lations:**
    - Une valeur proche de 1 (rouge) indique une forte corr√©lation positive
    - Une valeur proche de -1 (bleu) indique une forte corr√©lation n√©gative
    - Une valeur proche de 0 (blanc) indique une faible corr√©lation
    
    **Observations principales:**
    - La Qualit√© Globale et la Surface Habitable sont les caract√©ristiques les plus corr√©l√©es avec le prix
    - La Surface du Garage et le nombre de Places de Garage sont fortement corr√©l√©s entre eux
    - L'Ann√©e de Construction a une influence positive sur le prix
    """)

# Section Feature Engineering
elif page == "Feature Engineering":
    st.header("Feature Engineering")
    
    # Cr√©ation des features d√©riv√©es
    df['TotalSF'] = df['GrLivArea'] + df['TotalBsmtSF']  # Surface totale
    df['TotalBathrooms'] = df['FullBath'] + 0.5 * df['HalfBath'] + df['BsmtFullBath'] + 0.5 * df['BsmtHalfBath']  # Nombre total de salles de bain
    df['Age'] = df['YrSold'] - df['YearBuilt']  # √Çge de la maison
    df['SFPerRoom'] = df['TotalSF'] / df['TotRmsAbvGrd']  # Surface par pi√®ce
    df['OverallQualSF'] = df['OverallQual'] * df['TotalSF']  # Qualit√© globale pond√©r√©e
    df['TotalRooms'] = df['TotRmsAbvGrd'] + df['BsmtFinSF1'] / 100  # Nombre total de pi√®ces
    df['GarageSFPerCar'] = df['GarageArea'] / df['GarageCars'].replace(0, 1)  # Surface du garage par voiture
    df['YearsSinceRemodel'] = df['YrSold'] - df['YearRemodAdd']  # Ann√©es depuis la derni√®re r√©novation
    
    # Affichage des nouvelles features
    st.subheader("Nouvelles Features Cr√©√©es")
    new_features = ['TotalSF', 'TotalBathrooms', 'Age', 'SFPerRoom', 
                    'OverallQualSF', 'TotalRooms', 'GarageSFPerCar', 'YearsSinceRemodel']
    st.dataframe(df[new_features].head())
    
    # Visualisation des relations avec le prix
    st.subheader("Relations avec le Prix")
    feature_to_plot = st.selectbox("S√©lectionnez une feature:", new_features)
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.scatterplot(data=df, x=feature_to_plot, y='SalePrice', ax=ax)
    plt.title(f'Relation entre {feature_to_plot} et Prix')
    st.pyplot(fig)

# Section Pr√©diction
else:
    st.header("Pr√©diction des Prix")
    st.write("""
    Cette section vous permet de pr√©dire le prix d'une maison en trois √©tapes simples :
    1. Choisir le mod√®le de pr√©diction
    2. Configurer les param√®tres principaux
    3. Entrer les caract√©ristiques de la maison
    """)
    
    # Pr√©paration des donn√©es
    X = df.drop('SalePrice', axis=1)
    y = df['SalePrice']
    
    # Liste des caract√©ristiques les plus importantes (pr√©d√©finies)
    selected_features = [
        'OverallQual',    # Qualit√© globale
        'GrLivArea',      # Surface habitable
        'GarageArea',     # Surface du garage
        'TotalBsmtSF',    # Surface du sous-sol
        'YearBuilt',      # Ann√©e de construction
        '1stFlrSF',       # Surface du rez-de-chauss√©e
        'FullBath',       # Nombre de salles de bain
        'TotRmsAbvGrd'    # Nombre total de pi√®ces
    ]
    
    # 1. S√©lection du mod√®le (simplifi√©)
    st.subheader("1. Choix du Mod√®le")
    model_type = st.radio(
        "Choisissez votre mod√®le de pr√©diction:",
        ["Random Forest", "Gradient Boosting"],
        help="Random Forest est plus stable, Gradient Boosting peut √™tre plus pr√©cis mais n√©cessite plus de r√©glages"
    )
    
    # 2. Configuration simple du mod√®le
    st.subheader("2. Configuration du Mod√®le")
    if model_type == "Random Forest":
        n_estimators = st.slider(
            "Nombre d'arbres (plus il y en a, plus le mod√®le est pr√©cis mais lent):",
            50, 300, 100
        )
        model = RandomForestRegressor(n_estimators=n_estimators, random_state=42)
    else:
        learning_rate = st.slider(
            "Vitesse d'apprentissage (plus elle est basse, plus le mod√®le est stable):",
            0.01, 0.2, 0.1
        )
        model = GradientBoostingRegressor(learning_rate=learning_rate, random_state=42)
    
    # Pr√©paration des donn√©es
    X = X[selected_features]
    imputer = SimpleImputer(strategy='mean')
    X = pd.DataFrame(imputer.fit_transform(X), columns=X.columns)
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
    
    # 3. Interface de pr√©diction
    st.subheader("3. Caract√©ristiques de la Maison")
    st.write("Entrez les informations de la maison dont vous souhaitez pr√©dire le prix:")
    
    # Cr√©ation des champs de saisie avec des descriptions claires
    input_data = {}
    feature_descriptions = {
        'OverallQual': 'Qualit√© globale de la maison (1-10)',
        'GrLivArea': 'Surface habitable (en pieds carr√©s)',
        'GarageArea': 'Surface du garage (en pieds carr√©s)',
        'TotalBsmtSF': 'Surface du sous-sol (en pieds carr√©s)',
        'YearBuilt': 'Ann√©e de construction',
        '1stFlrSF': 'Surface du rez-de-chauss√©e (en pieds carr√©s)',
        'FullBath': 'Nombre de salles de bain compl√®tes',
        'TotRmsAbvGrd': 'Nombre total de pi√®ces (hors sous-sol)'
    }
    
    # Cr√©ation de deux colonnes pour les inputs
    col1, col2 = st.columns(2)
    for i, (feature, description) in enumerate(feature_descriptions.items()):
        with col1 if i < 4 else col2:
            input_data[feature] = st.number_input(
                f"{description}",
                value=float(df[feature].mean()),
                help=f"Moyenne: {df[feature].mean():.1f}, Min: {df[feature].min():.1f}, Max: {df[feature].max():.1f}"
            )
    
    # Bouton de pr√©diction
    if st.button("üìä Calculer le Prix"):
        with st.spinner("Calcul en cours..."):
            # Entra√Ænement du mod√®le
            model.fit(X_train, y_train)
            
            # Pr√©paration des donn√©es d'entr√©e
            input_df = pd.DataFrame([input_data])
            input_scaled = scaler.transform(input_df)
            
            # Pr√©diction
            prediction = model.predict(input_scaled)[0]
            
            # Affichage du r√©sultat
            st.success(f"üí∞ Prix estim√©: ${prediction:,.2f}")
            
            # Score du mod√®le
            r2 = r2_score(y_test, model.predict(X_test))
            st.info(f"Fiabilit√© du mod√®le (R¬≤): {r2:.2%}") 